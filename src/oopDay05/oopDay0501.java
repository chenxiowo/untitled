package oopDay05;

public class oopDay0501 {
    public static void main(String[] args) {
//        知识点1：上转型对象（向上造型）
//        上转型对象的概念：父类引用操作子类对象

//    注意：
//        上转型对象只能调用父类的属性和方法、
//        如果子类重写父类的方法，根据动态绑定上转型对象调用重写后的方法

        Animal a=new Cat("叮当","绿色");
//        a.climb() 无法调用，上转型对象不能调用子类特有的方法
        a.eat();//如果子类重写父类的方法，根据动态绑定上转型对象调用重写后的方法
        a.shot();
        a.sleep();

        Cat b=new Cat("小白","白色");//正常调用
        b.shot();//调用子类重写后的方法
        b.climb();//调用子类特有的方法

//        知识点2；下转型对象
//        2.1什么是下转型
//        父类引用强转为子类引用，叫做下转型
//        2.2关键字instanceof 判断对象类型
//        Cat c=(Cat) a;
        if(a instanceof Cat){
            Cat c=(Cat) a;//下转型
            c.shot();
        }else System.out.println("不是猫的对象，不能变为猫！");

//        知识点3：多态
//        3.1 什么是多态？
//                相同的事物在不同的子类对象上有不同的表现叫做多态
//                例子：动物的吼叫声，在不同的子类对象猫，狗，羊身上，吼叫声各不相同
//        3.2 多态的分类
//              类的内部多态（方法重载）
//                继承式多态（方法重写/方法覆盖）
//        3.3继承式多态的三个条件
//        要有继承，要有方法重写，要有上转型对象


//        知识点4：动态绑定
//        实现多态的技术称为动态绑定，即在运行期间根据对象的实际类型，去掉用相应的方法

//        创建一个动物园
        Animal[] arr=new Animal[4];
//        存入两个猫，两个狗
//        遍历数组 显示出每个动物对应的叫声
        arr[0]=new Cat("叮当","绿色");
        arr[1]=new Cat("刀哥","黑色");
        arr[2]=new Dog("凯特","黄色");
        arr[3]=new Dog("旺财","白色");
        for (Animal aw:arr){
            System.out.println(aw.getName());
            aw.shot();
        }

    }
}